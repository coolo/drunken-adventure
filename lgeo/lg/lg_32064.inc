/*******************************************************************************/
/*                                                                             */
/* LGEO Libray Include File     (C) lgeo@digitalbricks.org (Lutz Uhlmann)      */
/*                                                                             */
/* 19980811 Lutz Uhlmann                                                       */
/* 20080131 Lutz Uhlmann fixed hollow stud logo and orientation                */
/*                                                                             */
/* This file is in no way related to the LEGO(tm) Group.                       */
/* It is provided for private non-commercial use only.                         */
/*                                                                             */
/* lg_32064: Technic Beam 1 x 2 with Axlehole                                  */
/*                                                                             */ 
/*******************************************************************************/
#ifdef(lg_32064)
#else
#declare WIDTH = 2;
#declare lg_32064 = 
union {
 #declare ROT = 0;
 #while (ROT < 2)
  union {
   sphere {
    <LG_BRICK_WIDTH/2-LG_CORNER_SPACE, WIDTH/2*LG_BRICK_WIDTH-LG_CORNER_SPACE, -LG_CORNER_SPACE>, LG_CORNER_SPACE
   }
   sphere {
    <-LG_BRICK_WIDTH/2+LG_CORNER_SPACE, WIDTH/2*LG_BRICK_WIDTH-LG_CORNER_SPACE, -LG_CORNER_SPACE>, LG_CORNER_SPACE
   }
   sphere {
    <LG_BRICK_WIDTH/2-LG_CORNER_SPACE, WIDTH/2*LG_BRICK_WIDTH-LG_CORNER_SPACE, -LG_BRICK_HEIGHT+LG_CORNER_SPACE>, LG_CORNER_SPACE
   }
   sphere {
    <-LG_BRICK_WIDTH/2+LG_CORNER_SPACE, WIDTH/2*LG_BRICK_WIDTH-LG_CORNER_SPACE, -LG_BRICK_HEIGHT+LG_CORNER_SPACE>, LG_CORNER_SPACE
   }
   cylinder {
    <LG_BRICK_WIDTH/2-LG_CORNER_SPACE, WIDTH/2*LG_BRICK_WIDTH-LG_CORNER_SPACE, -LG_CORNER_SPACE>,
    <LG_BRICK_WIDTH/2-LG_CORNER_SPACE, -WIDTH/2*LG_BRICK_WIDTH+LG_CORNER_SPACE, -LG_CORNER_SPACE>,
    LG_CORNER_SPACE
   }
   cylinder {
    <LG_BRICK_WIDTH/2-LG_CORNER_SPACE, WIDTH/2*LG_BRICK_WIDTH-LG_CORNER_SPACE, -LG_CORNER_SPACE>,
    <-LG_BRICK_WIDTH/2+LG_CORNER_SPACE, WIDTH/2*LG_BRICK_WIDTH-LG_CORNER_SPACE, -LG_CORNER_SPACE>,
    LG_CORNER_SPACE
   }
   cylinder {
    <LG_BRICK_WIDTH/2-LG_CORNER_SPACE, WIDTH/2*LG_BRICK_WIDTH-LG_CORNER_SPACE, -LG_BRICK_HEIGHT+LG_CORNER_SPACE>,
    <-LG_BRICK_WIDTH/2+LG_CORNER_SPACE, WIDTH/2*LG_BRICK_WIDTH-LG_CORNER_SPACE, -LG_BRICK_HEIGHT+LG_CORNER_SPACE>,
    LG_CORNER_SPACE
   }
   cylinder {
    <LG_BRICK_WIDTH/2-LG_CORNER_SPACE, WIDTH/2*LG_BRICK_WIDTH-LG_CORNER_SPACE, -LG_BRICK_HEIGHT+LG_CORNER_SPACE>,
    <LG_BRICK_WIDTH/2-LG_CORNER_SPACE, -WIDTH/2*LG_BRICK_WIDTH+LG_CORNER_SPACE, -LG_BRICK_HEIGHT+LG_CORNER_SPACE>,
    LG_CORNER_SPACE
   }
   cylinder {
    <LG_BRICK_WIDTH/2-LG_CORNER_SPACE, WIDTH/2*LG_BRICK_WIDTH-LG_CORNER_SPACE, -LG_CORNER_SPACE>,
    <LG_BRICK_WIDTH/2-LG_CORNER_SPACE, WIDTH/2*LG_BRICK_WIDTH-LG_CORNER_SPACE, -LG_BRICK_HEIGHT+LG_CORNER_SPACE>,
    LG_CORNER_SPACE
   }
   cylinder {
    <LG_BRICK_WIDTH/2-LG_CORNER_SPACE, -WIDTH/2*LG_BRICK_WIDTH+LG_CORNER_SPACE, -LG_CORNER_SPACE>,
    <LG_BRICK_WIDTH/2-LG_CORNER_SPACE, -WIDTH/2*LG_BRICK_WIDTH+LG_CORNER_SPACE, -LG_BRICK_HEIGHT+LG_CORNER_SPACE>,
    LG_CORNER_SPACE
   }
   #if (ROT=1)
    rotate <0, 0, 180>
   #end
  }
  #declare ROT = ROT + 1;
 #end 
 difference {
  union {
   box {
    <LG_BRICK_WIDTH/2-LG_CORNER_SPACE, WIDTH/2*LG_BRICK_WIDTH-LG_CORNER_SPACE, 0>,
    <-LG_BRICK_WIDTH/2+LG_CORNER_SPACE, -WIDTH/2*LG_BRICK_WIDTH+LG_CORNER_SPACE, -LG_BRICK_HEIGHT>
   }
   box {
    <LG_BRICK_WIDTH/2, WIDTH/2*LG_BRICK_WIDTH-LG_CORNER_SPACE, -LG_CORNER_SPACE>,
    <-LG_BRICK_WIDTH/2, -WIDTH/2*LG_BRICK_WIDTH+LG_CORNER_SPACE, -LG_BRICK_HEIGHT+LG_CORNER_SPACE>
   }
   box {
    <LG_BRICK_WIDTH/2-LG_CORNER_SPACE, WIDTH/2*LG_BRICK_WIDTH, -LG_CORNER_SPACE>,
    <-LG_BRICK_WIDTH/2+LG_CORNER_SPACE, -WIDTH/2*LG_BRICK_WIDTH, -LG_BRICK_HEIGHT+LG_CORNER_SPACE>
   }
  }
  union {
   box {
    <LG_BRICK_WIDTH/2-LG_WALL_WIDTH, WIDTH/2*LG_BRICK_WIDTH-LG_WALL_WIDTH, -LG_TOP_HEIGHT>,
    <-LG_BRICK_WIDTH/2+LG_WALL_WIDTH, -WIDTH/2*LG_BRICK_WIDTH+LG_WALL_WIDTH, -LG_BRICK_HEIGHT-LG_E>
   }
   cylinder {
    <LG_BRICK_WIDTH/2, 0, -LG_BRICK_WIDTH/2>,
    <-LG_BRICK_WIDTH/2, 0, -LG_BRICK_WIDTH/2>,
    0.24
   }
   cylinder {
    <LG_BRICK_WIDTH/2-LG_CORNER_SPACE, 0, -LG_BRICK_WIDTH/2>,
    <LG_BRICK_WIDTH/2+LG_E, 0, -LG_BRICK_WIDTH/2>,
    0.24+LG_CORNER_SPACE
   }
   cylinder {
    <-LG_BRICK_WIDTH/2+LG_CORNER_SPACE, 0, -LG_BRICK_WIDTH/2>,
    <-LG_BRICK_WIDTH/2-LG_E, 0, -LG_BRICK_WIDTH/2>,
    0.24+LG_CORNER_SPACE
   }
  }
 }
 #declare HOLE = -WIDTH/2+0.5;
 #while (HOLE < WIDTH/2)
  object {
   lg_tech_knob_logo
   translate <0, HOLE*LG_BRICK_WIDTH, 0>
  }
  #declare HOLE = HOLE + 1;
 #end
 difference {
  union {
   box {
    <LG_BRICK_WIDTH/2-LG_WALL_WIDTH/2, LG_CYLINDER_RADIUS, -2*LG_CORNER_SPACE>,
    <-LG_BRICK_WIDTH/2+LG_WALL_WIDTH/2, -LG_CYLINDER_RADIUS, -LG_BRICK_WIDTH/2>
   }
   cylinder {
    <LG_BRICK_WIDTH/2-LG_WALL_WIDTH/2, 0, -LG_BRICK_WIDTH/2>
    <-LG_BRICK_WIDTH/2+LG_WALL_WIDTH/2, 0, -LG_BRICK_WIDTH/2>,
    LG_CYLINDER_RADIUS
   }
  }
  cylinder {
   <LG_BRICK_WIDTH/2, 0, -LG_BRICK_WIDTH/2>,
   <-LG_BRICK_WIDTH/2, 0, -LG_BRICK_WIDTH/2>,
   LG_KNOB_RADIUS
  }
  translate <0, 0, 0>
 }
 torus {
  0.24+LG_CORNER_SPACE,
  LG_CORNER_SPACE
  rotate <0, 0, 90>
  translate <LG_BRICK_WIDTH/2-LG_CORNER_SPACE, 0, -LG_BRICK_WIDTH/2>
 }
 torus {
  0.24+LG_CORNER_SPACE,
  LG_CORNER_SPACE
  rotate <0, 0, 90>
  translate <-LG_BRICK_WIDTH/2+LG_CORNER_SPACE, 0, -LG_BRICK_WIDTH/2>
 }
 intersection {
  union {
   #declare ROT = 0;
   #while (ROT < 4)
    union {
     cylinder { 
      <LG_CROSSAXLE_WIDTH/2+0.08, LG_CROSSAXLE_WIDTH/2+0.08, -LG_CORNER_SPACE>,
      <LG_CROSSAXLE_WIDTH/2+0.08, LG_CROSSAXLE_WIDTH/2+0.08, -LG_BRICK_WIDTH+LG_CORNER_SPACE>,
      0.08
     }
     cylinder { 
      <LG_CROSSAXLE_WIDTH/2+0.08, LG_CROSSAXLE_WIDTH/2+0.08, 0>,
      <LG_CROSSAXLE_WIDTH/2+0.08, LG_CROSSAXLE_WIDTH/2+0.08, -LG_BRICK_WIDTH>,
      0.08-LG_CORNER_SPACE
     }
     torus {
      0.08-LG_CORNER_SPACE,
      LG_CORNER_SPACE
      rotate <90, 0, >
      translate <LG_CROSSAXLE_WIDTH/2+0.08, LG_CROSSAXLE_WIDTH/2+0.08, -LG_CORNER_SPACE>
     }
     torus {
      0.08-LG_CORNER_SPACE,
      LG_CORNER_SPACE
      rotate <90, 0, >
      translate <LG_CROSSAXLE_WIDTH/2+0.08, LG_CROSSAXLE_WIDTH/2+0.08, -LG_BRICK_WIDTH+LG_CORNER_SPACE>
     }
     cylinder {
      <LG_CROSSAXLE_WIDTH/2+0.08, LG_CROSSAXLE_WIDTH/2+LG_CORNER_SPACE, -LG_CORNER_SPACE>,
      <LG_KNOB_RADIUS, LG_CROSSAXLE_WIDTH/2+LG_CORNER_SPACE, -LG_CORNER_SPACE>,
      LG_CORNER_SPACE
     }
     cylinder {
      <LG_CROSSAXLE_WIDTH/2+0.08, LG_CROSSAXLE_WIDTH/2+LG_CORNER_SPACE, -LG_BRICK_WIDTH+LG_CORNER_SPACE>,
      <LG_KNOB_RADIUS, LG_CROSSAXLE_WIDTH/2+LG_CORNER_SPACE, -LG_BRICK_WIDTH+LG_CORNER_SPACE>,
      LG_CORNER_SPACE
     }
     box {
      <LG_CROSSAXLE_WIDTH/2+0.08, LG_CROSSAXLE_WIDTH/2+LG_CORNER_SPACE, 0>,
      <LG_KNOB_RADIUS, LG_KNOB_RADIUS, -LG_BRICK_WIDTH>
     }
     box {
      <LG_CROSSAXLE_WIDTH/2+0.08, LG_CROSSAXLE_WIDTH/2, -LG_CORNER_SPACE>,
      <LG_KNOB_RADIUS, LG_CROSSAXLE_WIDTH/2+LG_CORNER_SPACE+LG_E, -LG_BRICK_WIDTH+LG_CORNER_SPACE>
     }
     cylinder {
      <LG_CROSSAXLE_WIDTH/2+LG_CORNER_SPACE, LG_CROSSAXLE_WIDTH/2+0.08, -LG_CORNER_SPACE>,
      <LG_CROSSAXLE_WIDTH/2+LG_CORNER_SPACE, LG_KNOB_RADIUS, -LG_CORNER_SPACE>,
      LG_CORNER_SPACE
     }
     cylinder {
      <LG_CROSSAXLE_WIDTH/2+LG_CORNER_SPACE, LG_CROSSAXLE_WIDTH/2+0.08, -LG_BRICK_WIDTH+LG_CORNER_SPACE>,
      <LG_CROSSAXLE_WIDTH/2+LG_CORNER_SPACE, LG_KNOB_RADIUS, -LG_BRICK_WIDTH+LG_CORNER_SPACE>,
      LG_CORNER_SPACE
     }
     box {
      <LG_CROSSAXLE_WIDTH/2+LG_CORNER_SPACE, LG_CROSSAXLE_WIDTH/2+0.08, 0>,
      <LG_KNOB_RADIUS, LG_KNOB_RADIUS, -LG_BRICK_WIDTH>
     }
     box {
      <LG_CROSSAXLE_WIDTH/2, LG_CROSSAXLE_WIDTH/2+0.08, -LG_CORNER_SPACE>,
      <LG_CROSSAXLE_WIDTH/2+LG_CORNER_SPACE+LG_E, LG_KNOB_RADIUS, -LG_BRICK_WIDTH+LG_CORNER_SPACE>
     }
     rotate <0, 0, 90*ROT>
     rotate <0, 90, 0>
    }
    #declare ROT = ROT + 1;
   #end
   translate <LG_BRICK_WIDTH/2, 0, -LG_BRICK_WIDTH/2>
  }
  cylinder {
   <LG_BRICK_WIDTH/2+LG_E, 0, -LG_BRICK_WIDTH/2>,
   <-LG_BRICK_WIDTH/2-LG_E, 0, -LG_BRICK_WIDTH/2>,
   0.29
  }
 }
 difference {
  union {
   difference {
    box {
     <LG_KNOB_RADIUS+LG_E, LG_WALL_WIDTH, -LG_BRICK_HEIGHT+LG_CORNER_SPACE>,
     <LG_CORNER_SPACE, 2*LG_WALL_WIDTH,-LG_TOP_HEIGHT+LG_E>
    }
    box {
     <LG_WALL_WIDTH, 0, 0>,
     <-LG_WALL_WIDTH, LG_KNOB_RADIUS, -LG_BRICK_HEIGHT>
     rotate <0,0,45>
     translate <LG_KNOB_RADIUS*sin(pi/4), LG_BRICK_WIDTH/2-LG_KNOB_RADIUS*sin(pi/4), 0> 
    }
   }
   difference {
    box {
     <-LG_KNOB_RADIUS-LG_E, LG_WALL_WIDTH, -LG_BRICK_HEIGHT+LG_CORNER_SPACE>,
     <-LG_CORNER_SPACE, 2*LG_WALL_WIDTH,-LG_TOP_HEIGHT+LG_E>
    }
    box {
     <LG_WALL_WIDTH, 0, 0>,
     <-LG_WALL_WIDTH, LG_KNOB_RADIUS, -LG_BRICK_HEIGHT>
     rotate <0,0,-45>
     translate <-LG_KNOB_RADIUS*sin(pi/4), LG_BRICK_WIDTH/2-LG_KNOB_RADIUS*sin(pi/4), 0> 
    }
   }
   difference {
    box {
     <LG_KNOB_RADIUS+LG_E, -LG_WALL_WIDTH, -LG_BRICK_HEIGHT+LG_CORNER_SPACE>,
     <LG_CORNER_SPACE, -2*LG_WALL_WIDTH,-LG_TOP_HEIGHT+LG_E>
    }
    box {
     <LG_WALL_WIDTH, 0, 0>,
     <-LG_WALL_WIDTH, -LG_KNOB_RADIUS, -LG_BRICK_HEIGHT>
     rotate <0,0,-45>
     translate <LG_KNOB_RADIUS*sin(pi/4), -LG_BRICK_WIDTH/2+LG_KNOB_RADIUS*sin(pi/4), 0> 
    }
   }
   difference {
    box {
     <-LG_KNOB_RADIUS-LG_E, -LG_WALL_WIDTH, -LG_BRICK_HEIGHT+LG_CORNER_SPACE>,
     <-LG_CORNER_SPACE, -2*LG_WALL_WIDTH,-LG_TOP_HEIGHT+LG_E>
    }
    box {
     <LG_WALL_WIDTH, 0, 0>,
     <-LG_WALL_WIDTH, -LG_KNOB_RADIUS, -LG_BRICK_HEIGHT>
     rotate <0,0,45>
     translate <-LG_KNOB_RADIUS*sin(pi/4), -LG_BRICK_WIDTH/2+LG_KNOB_RADIUS*sin(pi/4), 0> 
    }
   }
  }
  cylinder {
   <LG_BRICK_WIDTH/2+LG_E, 0, -LG_BRICK_WIDTH/2>,
   <-LG_BRICK_WIDTH/2-LG_E, 0, -LG_BRICK_WIDTH/2>,
   0.29
  }
 }
}

#declare lg_32064_clear = 
merge {
 #declare ROT = 0;
 #while (ROT < 2)
  merge {
   sphere {
    <LG_BRICK_WIDTH/2-LG_CORNER_SPACE, WIDTH/2*LG_BRICK_WIDTH-LG_CORNER_SPACE, -LG_CORNER_SPACE>, LG_CORNER_SPACE
   }
   sphere {
    <-LG_BRICK_WIDTH/2+LG_CORNER_SPACE, WIDTH/2*LG_BRICK_WIDTH-LG_CORNER_SPACE, -LG_CORNER_SPACE>, LG_CORNER_SPACE
   }
   sphere {
    <LG_BRICK_WIDTH/2-LG_CORNER_SPACE, WIDTH/2*LG_BRICK_WIDTH-LG_CORNER_SPACE, -LG_BRICK_HEIGHT+LG_CORNER_SPACE>, LG_CORNER_SPACE
   }
   sphere {
    <-LG_BRICK_WIDTH/2+LG_CORNER_SPACE, WIDTH/2*LG_BRICK_WIDTH-LG_CORNER_SPACE, -LG_BRICK_HEIGHT+LG_CORNER_SPACE>, LG_CORNER_SPACE
   }
   cylinder {
    <LG_BRICK_WIDTH/2-LG_CORNER_SPACE, WIDTH/2*LG_BRICK_WIDTH-LG_CORNER_SPACE, -LG_CORNER_SPACE>,
    <LG_BRICK_WIDTH/2-LG_CORNER_SPACE, -WIDTH/2*LG_BRICK_WIDTH+LG_CORNER_SPACE, -LG_CORNER_SPACE>,
    LG_CORNER_SPACE
   }
   cylinder {
    <LG_BRICK_WIDTH/2-LG_CORNER_SPACE, WIDTH/2*LG_BRICK_WIDTH-LG_CORNER_SPACE, -LG_CORNER_SPACE>,
    <-LG_BRICK_WIDTH/2+LG_CORNER_SPACE, WIDTH/2*LG_BRICK_WIDTH-LG_CORNER_SPACE, -LG_CORNER_SPACE>,
    LG_CORNER_SPACE
   }
   cylinder {
    <LG_BRICK_WIDTH/2-LG_CORNER_SPACE, WIDTH/2*LG_BRICK_WIDTH-LG_CORNER_SPACE, -LG_BRICK_HEIGHT+LG_CORNER_SPACE>,
    <-LG_BRICK_WIDTH/2+LG_CORNER_SPACE, WIDTH/2*LG_BRICK_WIDTH-LG_CORNER_SPACE, -LG_BRICK_HEIGHT+LG_CORNER_SPACE>,
    LG_CORNER_SPACE
   }
   cylinder {
    <LG_BRICK_WIDTH/2-LG_CORNER_SPACE, WIDTH/2*LG_BRICK_WIDTH-LG_CORNER_SPACE, -LG_BRICK_HEIGHT+LG_CORNER_SPACE>,
    <LG_BRICK_WIDTH/2-LG_CORNER_SPACE, -WIDTH/2*LG_BRICK_WIDTH+LG_CORNER_SPACE, -LG_BRICK_HEIGHT+LG_CORNER_SPACE>,
    LG_CORNER_SPACE
   }
   cylinder {
    <LG_BRICK_WIDTH/2-LG_CORNER_SPACE, WIDTH/2*LG_BRICK_WIDTH-LG_CORNER_SPACE, -LG_CORNER_SPACE>,
    <LG_BRICK_WIDTH/2-LG_CORNER_SPACE, WIDTH/2*LG_BRICK_WIDTH-LG_CORNER_SPACE, -LG_BRICK_HEIGHT+LG_CORNER_SPACE>,
    LG_CORNER_SPACE
   }
   cylinder {
    <LG_BRICK_WIDTH/2-LG_CORNER_SPACE, -WIDTH/2*LG_BRICK_WIDTH+LG_CORNER_SPACE, -LG_CORNER_SPACE>,
    <LG_BRICK_WIDTH/2-LG_CORNER_SPACE, -WIDTH/2*LG_BRICK_WIDTH+LG_CORNER_SPACE, -LG_BRICK_HEIGHT+LG_CORNER_SPACE>,
    LG_CORNER_SPACE
   }
   #if (ROT=1)
    rotate <0, 0, 180>
   #end
  }
  #declare ROT = ROT + 1;
 #end 
 difference {
  merge {
   box {
    <LG_BRICK_WIDTH/2-LG_CORNER_SPACE, WIDTH/2*LG_BRICK_WIDTH-LG_CORNER_SPACE, 0>,
    <-LG_BRICK_WIDTH/2+LG_CORNER_SPACE, -WIDTH/2*LG_BRICK_WIDTH+LG_CORNER_SPACE, -LG_BRICK_HEIGHT>
   }
   box {
    <LG_BRICK_WIDTH/2, WIDTH/2*LG_BRICK_WIDTH-LG_CORNER_SPACE, -LG_CORNER_SPACE>,
    <-LG_BRICK_WIDTH/2, -WIDTH/2*LG_BRICK_WIDTH+LG_CORNER_SPACE, -LG_BRICK_HEIGHT+LG_CORNER_SPACE>
   }
   box {
    <LG_BRICK_WIDTH/2-LG_CORNER_SPACE, WIDTH/2*LG_BRICK_WIDTH, -LG_CORNER_SPACE>,
    <-LG_BRICK_WIDTH/2+LG_CORNER_SPACE, -WIDTH/2*LG_BRICK_WIDTH, -LG_BRICK_HEIGHT+LG_CORNER_SPACE>
   }
  }
  union {
   box {
    <LG_BRICK_WIDTH/2-LG_WALL_WIDTH, WIDTH/2*LG_BRICK_WIDTH-LG_WALL_WIDTH, -LG_TOP_HEIGHT>,
    <-LG_BRICK_WIDTH/2+LG_WALL_WIDTH, -WIDTH/2*LG_BRICK_WIDTH+LG_WALL_WIDTH, -LG_BRICK_HEIGHT-LG_E>
   }
   cylinder {
    <LG_BRICK_WIDTH/2, 0, -LG_BRICK_WIDTH/2>,
    <-LG_BRICK_WIDTH/2, 0, -LG_BRICK_WIDTH/2>,
    0.24
   }
   cylinder {
    <LG_BRICK_WIDTH/2-LG_CORNER_SPACE, 0, -LG_BRICK_WIDTH/2>,
    <LG_BRICK_WIDTH/2+LG_E, 0, -LG_BRICK_WIDTH/2>,
    0.24+LG_CORNER_SPACE
   }
   cylinder {
    <-LG_BRICK_WIDTH/2+LG_CORNER_SPACE, 0, -LG_BRICK_WIDTH/2>,
    <-LG_BRICK_WIDTH/2-LG_E, 0, -LG_BRICK_WIDTH/2>,
    0.24+LG_CORNER_SPACE
   }
  }
 }
 #declare HOLE = -WIDTH/2+0.5;
 #while (HOLE < WIDTH/2)
  object {
   lg_tech_knob_logo_clear
   translate <0, HOLE*LG_BRICK_WIDTH, 0>
  }
  #declare HOLE = HOLE + 1;
 #end
 difference {
  merge {
   box {
    <LG_BRICK_WIDTH/2-LG_WALL_WIDTH/2, LG_CYLINDER_RADIUS, -2*LG_CORNER_SPACE>,
    <-LG_BRICK_WIDTH/2+LG_WALL_WIDTH/2, -LG_CYLINDER_RADIUS, -LG_BRICK_WIDTH/2>
   }
   cylinder {
    <LG_BRICK_WIDTH/2-LG_WALL_WIDTH/2, 0, -LG_BRICK_WIDTH/2>
    <-LG_BRICK_WIDTH/2+LG_WALL_WIDTH/2, 0, -LG_BRICK_WIDTH/2>,
    LG_CYLINDER_RADIUS
   }
  }
  cylinder {
   <LG_BRICK_WIDTH/2, 0, -LG_BRICK_WIDTH/2>,
   <-LG_BRICK_WIDTH/2, 0, -LG_BRICK_WIDTH/2>,
   LG_KNOB_RADIUS
  }
  translate <0, 0, 0>
 }
 torus {
  0.24+LG_CORNER_SPACE,
  LG_CORNER_SPACE
  rotate <0, 0, 90>
  translate <LG_BRICK_WIDTH/2-LG_CORNER_SPACE, 0, -LG_BRICK_WIDTH/2>
 }
 torus {
  0.24+LG_CORNER_SPACE,
  LG_CORNER_SPACE
  rotate <0, 0, 90>
  translate <-LG_BRICK_WIDTH/2+LG_CORNER_SPACE, 0, -LG_BRICK_WIDTH/2>
 }
 intersection {
  merge {
   #declare ROT = 0;
   #while (ROT < 4)
    merge {
     cylinder { 
      <LG_CROSSAXLE_WIDTH/2+0.08, LG_CROSSAXLE_WIDTH/2+0.08, -LG_CORNER_SPACE>,
      <LG_CROSSAXLE_WIDTH/2+0.08, LG_CROSSAXLE_WIDTH/2+0.08, -LG_BRICK_WIDTH+LG_CORNER_SPACE>,
      0.08
     }
     cylinder { 
      <LG_CROSSAXLE_WIDTH/2+0.08, LG_CROSSAXLE_WIDTH/2+0.08, 0>,
      <LG_CROSSAXLE_WIDTH/2+0.08, LG_CROSSAXLE_WIDTH/2+0.08, -LG_BRICK_WIDTH>,
      0.08-LG_CORNER_SPACE
     }
     torus {
      0.08-LG_CORNER_SPACE,
      LG_CORNER_SPACE
      rotate <90, 0, >
      translate <LG_CROSSAXLE_WIDTH/2+0.08, LG_CROSSAXLE_WIDTH/2+0.08, -LG_CORNER_SPACE>
     }
     torus {
      0.08-LG_CORNER_SPACE,
      LG_CORNER_SPACE
      rotate <90, 0, >
      translate <LG_CROSSAXLE_WIDTH/2+0.08, LG_CROSSAXLE_WIDTH/2+0.08, -LG_BRICK_WIDTH+LG_CORNER_SPACE>
     }
     cylinder {
      <LG_CROSSAXLE_WIDTH/2+0.08, LG_CROSSAXLE_WIDTH/2+LG_CORNER_SPACE, -LG_CORNER_SPACE>,
      <LG_KNOB_RADIUS, LG_CROSSAXLE_WIDTH/2+LG_CORNER_SPACE, -LG_CORNER_SPACE>,
      LG_CORNER_SPACE
     }
     cylinder {
      <LG_CROSSAXLE_WIDTH/2+0.08, LG_CROSSAXLE_WIDTH/2+LG_CORNER_SPACE, -LG_BRICK_WIDTH+LG_CORNER_SPACE>,
      <LG_KNOB_RADIUS, LG_CROSSAXLE_WIDTH/2+LG_CORNER_SPACE, -LG_BRICK_WIDTH+LG_CORNER_SPACE>,
      LG_CORNER_SPACE
     }
     box {
      <LG_CROSSAXLE_WIDTH/2+0.08, LG_CROSSAXLE_WIDTH/2+LG_CORNER_SPACE, 0>,
      <LG_KNOB_RADIUS, LG_KNOB_RADIUS, -LG_BRICK_WIDTH>
     }
     box {
      <LG_CROSSAXLE_WIDTH/2+0.08, LG_CROSSAXLE_WIDTH/2, -LG_CORNER_SPACE>,
      <LG_KNOB_RADIUS, LG_CROSSAXLE_WIDTH/2+LG_CORNER_SPACE+LG_E, -LG_BRICK_WIDTH+LG_CORNER_SPACE>
     }
     cylinder {
      <LG_CROSSAXLE_WIDTH/2+LG_CORNER_SPACE, LG_CROSSAXLE_WIDTH/2+0.08, -LG_CORNER_SPACE>,
      <LG_CROSSAXLE_WIDTH/2+LG_CORNER_SPACE, LG_KNOB_RADIUS, -LG_CORNER_SPACE>,
      LG_CORNER_SPACE
     }
     cylinder {
      <LG_CROSSAXLE_WIDTH/2+LG_CORNER_SPACE, LG_CROSSAXLE_WIDTH/2+0.08, -LG_BRICK_WIDTH+LG_CORNER_SPACE>,
      <LG_CROSSAXLE_WIDTH/2+LG_CORNER_SPACE, LG_KNOB_RADIUS, -LG_BRICK_WIDTH+LG_CORNER_SPACE>,
      LG_CORNER_SPACE
     }
     box {
      <LG_CROSSAXLE_WIDTH/2+LG_CORNER_SPACE, LG_CROSSAXLE_WIDTH/2+0.08, 0>,
      <LG_KNOB_RADIUS, LG_KNOB_RADIUS, -LG_BRICK_WIDTH>
     }
     box {
      <LG_CROSSAXLE_WIDTH/2, LG_CROSSAXLE_WIDTH/2+0.08, -LG_CORNER_SPACE>,
      <LG_CROSSAXLE_WIDTH/2+LG_CORNER_SPACE+LG_E, LG_KNOB_RADIUS, -LG_BRICK_WIDTH+LG_CORNER_SPACE>
     }
     rotate <0, 0, 90*ROT>
     rotate <0, 90, 0>
    }
    #declare ROT = ROT + 1;
   #end
   translate <LG_BRICK_WIDTH/2, 0, -LG_BRICK_WIDTH/2>
  }
  cylinder {
   <LG_BRICK_WIDTH/2+LG_E, 0, -LG_BRICK_WIDTH/2>,
   <-LG_BRICK_WIDTH/2-LG_E, 0, -LG_BRICK_WIDTH/2>,
   0.29
  }
 }
 difference {
  merge {
   difference {
    box {
     <LG_KNOB_RADIUS+LG_E, LG_WALL_WIDTH, -LG_BRICK_HEIGHT+LG_CORNER_SPACE>,
     <LG_CORNER_SPACE, 2*LG_WALL_WIDTH,-LG_TOP_HEIGHT+LG_E>
    }
    box {
     <LG_WALL_WIDTH, 0, 0>,
     <-LG_WALL_WIDTH, LG_KNOB_RADIUS, -LG_BRICK_HEIGHT>
     rotate <0,0,45>
     translate <LG_KNOB_RADIUS*sin(pi/4), LG_BRICK_WIDTH/2-LG_KNOB_RADIUS*sin(pi/4), 0> 
    }
   }
   difference {
    box {
     <-LG_KNOB_RADIUS-LG_E, LG_WALL_WIDTH, -LG_BRICK_HEIGHT+LG_CORNER_SPACE>,
     <-LG_CORNER_SPACE, 2*LG_WALL_WIDTH,-LG_TOP_HEIGHT+LG_E>
    }
    box {
     <LG_WALL_WIDTH, 0, 0>,
     <-LG_WALL_WIDTH, LG_KNOB_RADIUS, -LG_BRICK_HEIGHT>
     rotate <0,0,-45>
     translate <-LG_KNOB_RADIUS*sin(pi/4), LG_BRICK_WIDTH/2-LG_KNOB_RADIUS*sin(pi/4), 0> 
    }
   }
   difference {
    box {
     <LG_KNOB_RADIUS+LG_E, -LG_WALL_WIDTH, -LG_BRICK_HEIGHT+LG_CORNER_SPACE>,
     <LG_CORNER_SPACE, -2*LG_WALL_WIDTH,-LG_TOP_HEIGHT+LG_E>
    }
    box {
     <LG_WALL_WIDTH, 0, 0>,
     <-LG_WALL_WIDTH, -LG_KNOB_RADIUS, -LG_BRICK_HEIGHT>
     rotate <0,0,-45>
     translate <LG_KNOB_RADIUS*sin(pi/4), -LG_BRICK_WIDTH/2+LG_KNOB_RADIUS*sin(pi/4), 0> 
    }
   }
   difference {
    box {
     <-LG_KNOB_RADIUS-LG_E, -LG_WALL_WIDTH, -LG_BRICK_HEIGHT+LG_CORNER_SPACE>,
     <-LG_CORNER_SPACE, -2*LG_WALL_WIDTH,-LG_TOP_HEIGHT+LG_E>
    }
    box {
     <LG_WALL_WIDTH, 0, 0>,
     <-LG_WALL_WIDTH, -LG_KNOB_RADIUS, -LG_BRICK_HEIGHT>
     rotate <0,0,45>
     translate <-LG_KNOB_RADIUS*sin(pi/4), -LG_BRICK_WIDTH/2+LG_KNOB_RADIUS*sin(pi/4), 0> 
    }
   }
  }
  cylinder {
   <LG_BRICK_WIDTH/2+LG_E, 0, -LG_BRICK_WIDTH/2>,
   <-LG_BRICK_WIDTH/2-LG_E, 0, -LG_BRICK_WIDTH/2>,
   0.29
  }
 }
}

#end
